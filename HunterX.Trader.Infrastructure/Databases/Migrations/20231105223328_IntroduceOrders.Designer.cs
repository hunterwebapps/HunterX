// <auto-generated />
using System;
using HunterX.Trader.Infrastructure.Databases;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HunterX.Trader.Infrastructure.Databases.Migrations
{
    [DbContext(typeof(TradingSqlDbContext))]
    [Migration("20231105223328_IntroduceOrders")]
    partial class IntroduceOrders
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("HunterX.Trader.Infrastructure.Databases.Entities.MarketHoliday", b =>
                {
                    b.Property<DateTime>("Date")
                        .HasColumnType("date");

                    b.Property<string>("Exchange")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<TimeSpan?>("Close")
                        .HasColumnType("time");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<TimeSpan?>("Open")
                        .HasColumnType("time");

                    b.HasKey("Date", "Exchange");

                    b.ToTable("MarketHolidays");
                });

            modelBuilder.Entity("HunterX.Trader.Infrastructure.Databases.Entities.Order", b =>
                {
                    b.Property<Guid>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AssetClass")
                        .IsRequired()
                        .HasColumnType("varchar");

                    b.Property<DateTime?>("CancelledAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ExpiredAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FailedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FilledAt")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("FilledPrice")
                        .HasPrecision(7, 2)
                        .HasColumnType("decimal(7,2)");

                    b.Property<decimal?>("LimitPrice")
                        .HasPrecision(7, 2)
                        .HasColumnType("decimal(7,2)");

                    b.Property<string>("OrderSide")
                        .IsRequired()
                        .HasColumnType("varchar");

                    b.Property<string>("OrderType")
                        .IsRequired()
                        .HasColumnType("varchar");

                    b.Property<decimal>("OrderedPrice")
                        .HasPrecision(7, 2)
                        .HasColumnType("decimal(7,2)");

                    b.Property<Guid?>("ParentOrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal?>("StopLossPrice")
                        .HasPrecision(7, 2)
                        .HasColumnType("decimal(7,2)");

                    b.Property<decimal?>("StopOrderPrice")
                        .HasPrecision(7, 2)
                        .HasColumnType("decimal(7,2)");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("TimeInForce")
                        .IsRequired()
                        .HasColumnType("varchar");

                    b.Property<decimal?>("TrailPercent")
                        .HasPrecision(3, 2)
                        .HasColumnType("decimal(3,2)");

                    b.Property<decimal?>("TrailPrice")
                        .HasPrecision(7, 2)
                        .HasColumnType("decimal(7,2)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("OrderId");

                    b.HasIndex("ParentOrderId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("HunterX.Trader.Infrastructure.Databases.Entities.StockSymbol", b =>
                {
                    b.Property<string>("Symbol")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Exchange")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("Market")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Symbol", "Exchange");

                    b.ToTable("StockSymbols");
                });

            modelBuilder.Entity("HunterX.Trader.Infrastructure.Databases.Entities.Order", b =>
                {
                    b.HasOne("HunterX.Trader.Infrastructure.Databases.Entities.Order", "ParentOrder")
                        .WithMany("Legs")
                        .HasForeignKey("ParentOrderId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("ParentOrder");
                });

            modelBuilder.Entity("HunterX.Trader.Infrastructure.Databases.Entities.Order", b =>
                {
                    b.Navigation("Legs");
                });
#pragma warning restore 612, 618
        }
    }
}
